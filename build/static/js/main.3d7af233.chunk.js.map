{"version":3,"sources":["components/About.js","components/BagItem.js","components/Bag.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["About","BagItem","props","state","item","to","this","id","name","Component","Bag","baglist","console","log","axios","get","then","response","data","setState","catch","err","bagItems","map","bag","i","key","Main","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yPAOeA,EALF,kBACT,6BACI,6D,yDCaOC,E,YAdX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,KAAKF,EAAME,MAHD,E,sEAOd,OACI,4BACI,kBAAC,IAAD,CAAMC,GAAE,+BAA0BC,KAAKH,MAAMC,KAAKG,KAAQD,KAAKH,MAAMC,KAAKI,W,GAVpEC,aCqCPC,E,YAnCX,aAAc,IAAD,8BACT,+CACKP,MAAM,CACPQ,QAAQ,IAHH,E,kFAOTC,QAAQC,IAAI,O,gCAGN,IAAD,OACLC,IAAMC,IAAI,kCACLC,MAAK,SAAAC,GACFL,QAAQC,IAAII,EAASC,MACrB,EAAKC,SAAS,CAACR,QAASM,EAASC,OAAM,WACrCN,QAAQC,IAAI,EAAKV,aAGtBiB,OAAM,SAAAC,GAAG,OAAGT,QAAQC,IAAIQ,Q,+BAG7B,IAAMC,EAAWhB,KAAKH,MAAMQ,QAAQY,KAAI,SAACC,EAAIC,GACzC,OACG,kBAAC,EAAD,CAASC,IAAOF,EAAIjB,GAAIH,KAAOoB,OAGtC,OACI,6BACI,4BACKF,Q,GA9BHb,aCYHkB,EATF,kBACT,8BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAapB,IACrC,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAO,SAASC,UAAa9B,OCGvC+B,G,MARL,WACR,OACE,6BACE,kBAAC,EAAD,SCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACT,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.3d7af233.chunk.js","sourcesContent":["import React from 'react';\n\nconst About =() =>(\n    <div>\n        <h1> THis is a web for weather </h1>\n    </div>\n)\nexport default About;\n","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nclass BagItem extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            item:props.item\n        }\n    }\n    render(){\n        return (\n            <li>\n                <Link to={`/goodsdetail.html?id=${this.state.item.id}`} >{this.state.item.name}</Link>\n            </li>\n        )\n    }\n}\nexport default BagItem;","import React,{ Component } from \"react\";\nimport axios from \"axios\";\nimport BagItem from './BagItem';\nclass Bag extends Component{\n    constructor(){\n        super();\n        this.state={\n            baglist:[]\n        }\n    }\n    componentWillMount(){\n        console.log(123);\n        //this.getBags()\n    }\n    getBags(){\n        axios.get('http://localhost:3000/api/Bags')  \n            .then(response=>{\n                console.log(response.data);\n                this.setState({baglist: response.data},()=>\n                { console.log(this.state)})\n                \n            })\n            .catch(err =>console.log(err) );\n    }\n    render(){\n        const bagItems = this.state.baglist.map((bag,i)=>{\n            return(\n               <BagItem key = {bag.id} item ={bag}/>\n            )\n        })\n        return (\n            <div>\n                <ul>\n                    {bagItems}\n                </ul>\n            </div>\n        )\n    }\n}\nexport default Bag;","import React from 'react';\nimport { Switch ,Route } from 'react-router-dom';\n\nimport About from './About';\nimport Bag from './Bag';\n\nconst Main = () =>(\n    <main>\n        <Switch>\n            <Route exact path = '/' component = {Bag} />\n            <Route exact path = '/goods' component = {About} />\n           \n        </Switch>\n    </main>\n)\nexport default Main;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Main from './components/Main';\nimport './sass/snow.scss';\nconst App=()=> {\n  return (\n    <div >\n      <Main></Main>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<BrowserRouter>\n    <App />\n</BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}